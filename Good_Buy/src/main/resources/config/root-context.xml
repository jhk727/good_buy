<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- HikariCP 라이브러리 사용을 위한 설정(커넥션풀 설정) -->
	<!-- 1. HikariCP 를 활용한 DB 접속 정보 설정 위해 HikariConfig 객체 설정(JDBC 기본 설정) -->
	<!-- com.zaxxer.hikari 패키지의 HikariConfig 클래스 지정 및 속성 설정 -->
<!-- 	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig"> -->
<!-- 		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property> -->
<!-- 		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/study_jsp3"></property> -->
<!-- 		<property name="username" value="root"></property> -->
<!-- 		<property name="password" value="1234"></property> -->
<!-- 	</bean> -->

	<!-- log4jdbc SQL 로그를 위한 설정(driverClassName, jdbcUrl 값 변경) -->
	<!-- SQL 로그를 위한 log4jdbc 라이브러리 관련 DBCP 정보 변경(driverClassName, jdbcUrl 속성만 변경) -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<!-- 외부 properties 파일로부터 값을 가져와서 사용 => 아래 위치 -->
		<property name="jdbcUrl" value="jdbc:log4jdbc:mysql://${db.host}/${db.db_name}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	
	<!-- 2. HikariCP 를 통해 커넥션을 관리하는 DataSource 객체(HikariDataSource) 설정 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"></constructor-arg>
	</bean>
	
	<!-- 3. Connection 객체 생성, 쿼리 전달 및 결과 리턴 등의 작업을 수행할 SQLSession 객체 설정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/config/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:/com/itwillbs/goodbuy/mapper/*Mapper.xml"></property>
	</bean>
	
	<!-- 4. MyBatis 연동에 사용될 객체(클래스)들의 패키지 위치 지정(기본 루트 패키지 지정) -->
	<mybatis-spring:scan base-package="com.itwillbs.goodbuy"/>
	
	<!-- 5. 트랜잭션 설정 -->
	<!-- 5-1) <bean> 태그를 사용하여 DataSourceTransactionManager 객체 설정 -->
	<!-- id 속성값 "transactionManager" 고정 -->
	<!-- class 속성값 "org.springframework.jdbc.datasource.DataSourceTransactionManager" 클래스 지정 -->
	<!-- bean 태그 내부에 property 태그에 2번 과정에서 생성한 DataSource 객체의 id 속성값 지정 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 5-2) <tx:annotation-driven> 태그를 통해 5-1 과정에서 생성한 트랜잭션 관리 객체 지정 -->
	<!-- namespaces 탭에서 tx 항목 추가 필요 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 현재 XML 파일에서 properties 파일 내의 속성에 접근하려면 servlet-context.xml과 동일한 설정 -->
	<!-- 주의! namespaces 탭에서 context 항목 추가 필수! -->
	<context:property-placeholder location="classpath:/config/appdata.properties"/>
	
	<!-- ============================================================== -->
	<!-- AOP 설정(namespaces 에서 aop 와 context 추가) -->
	<!-- 빈으로 등록할 클래스 스캔을 위해 탐색할 패키지 지정 -->
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board" /> -->

	<!-- Service, Repository 등 웹과 관련없는 클래스들을 스프링 빈으로 등록하기 위해 패키지 지정 -->
	<!-- 웹의 요청/응답을 직접적으로 처리하는 클래스들 외에는 보통 root-context.xml 에서 로그하면 -->
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board.service" /> -->
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board.handler" /> -->
<!-- 	<context:component-scan base-package="com.itwillbs.mvc_board.aop" /> -->
	<context:component-scan base-package="com.itwillbs.goodbuy.service" />
	<context:component-scan base-package="com.itwillbs.goodbuy.handler" />
	<context:component-scan base-package="com.itwillbs.goodbuy.aop" />
	
	<!-- 오토 프록시(Auto-Proxy) 기능을 통해 객체 생성을 하기 위한 설정 -->
<!-- 	<aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	
</beans>
