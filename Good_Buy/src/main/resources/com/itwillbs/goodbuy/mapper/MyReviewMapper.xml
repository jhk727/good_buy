<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.goodbuy.mapper.MyReviewMapper">
	<!-- 	리뷰 리스트 조회 -->
	<select id="selectReview">
		SELECT R.* , P.PRODUCT_TITLE , B.MEM_NICK AS BUYERNICK, S.MEM_NICK AS SELLERNICK,B.MEM_PROFILE
		  FROM MYREVIEW R 
			JOIN PRODUCT P ON R.PRODUCT_ID = P.PRODUCT_ID
			JOIN MEMBER S ON S.MEM_ID = P.MEM_ID  -- 판매자 닉네임
			JOIN MEMBER B ON B.MEM_ID = R.MEM_ID  -- 구매자 닉네임
		 WHERE P.MEM_ID = #{mem_id}
		 ORDER BY R.REVIEW_DATE DESC
		 LIMIT 3
	</select>
	<!-- 	리뷰 갯수 -->
	<select id="selectReviewCount" resultType="int">
		SELECT COUNT(*)
		FROM PRODUCT P JOIN MYREVIEW R ON P.PRODUCT_ID = R.PRODUCT_ID
		WHERE P.MEM_ID = #{mem_id};
	</select>
	
<!-- 	리뷰작성 -->
	<insert id="insertReview">
		<selectKey resultType="int" order="BEFORE" keyProperty="review_id">
<!-- 			SELECT MAX(REVIEW_ID) + 1 -->
<!-- 			SELECT COALESCE(MAX(REVIEW_ID), 0) + 1 -->
			SELECT IFNULL(MAX(REVIEW_ID), 0) + 1
			FROM MYREVIEW;
		</selectKey>
		INSERT INTO MYREVIEW (
		    REVIEW_ID
		   , MEM_ID
		   , REVIEW_CONTENT
		   , REVIEW_DATE
		   , PRODUCT_TITLE
		   , REVIEW_SCORE
		   , PRODUCT_ID
		   , REVIEW_OPTIONS 
		) VALUES (
		    #{review_id}             -- 리뷰 ID
		    , #{mem_id}              -- 회원 ID
		    , #{review}  	 		 -- 리뷰 내용
		    , now()					 -- 리뷰 날짜
		    , #{product_title}
		    , #{score}
		    , #{product_id}            
		    , #{reviewOptions}
		);
	
	</insert>
	
	<!-- 리뷰평점 올라감!!! -->
<!-- 	<update id=""></update> -->
	
	
	<!-- 내가 쓴 리뷰 -->
	<select id="selectReviewHistory" resultType="review">
        SELECT 
        	R.review_options,
		    R.review_id,
		    R.mem_id,
		    R.review_content,
		    R.review_date,
		    R.product_title,
		    R.review_score,
		    R.product_id,
		    M.MEM_NICK AS buyerNick,
		    M1.MEM_NICK AS sellerNick
		FROM MYREVIEW R
		JOIN MEMBER M ON R.MEM_ID = M.MEM_ID
		JOIN PRODUCT P ON R.PRODUCT_ID = P.PRODUCT_ID
		JOIN MEMBER M1 ON P.MEM_ID = M1.MEM_ID
		 <where>
	        R.MEM_ID = #{mem_id}
	        <if test="searchKeyword != null and !searchKeyword.isEmpty()">
	            AND P.PRODUCT_TITLE LIKE CONCAT('%', #{searchKeyword}, '%')
	        </if>
	    </where>
	    ORDER BY R.REVIEW_DATE DESC
	    LIMIT #{startRow}, #{listLimit}
	</select>
	
	<!-- 나의 리부 수정 -->
	<update id="updateReview">
		UPDATE MYREVIEW
		SET REVIEW_CONTENT = #{review_content}
		WHERE PRODUCT_ID = #{product_id}
	</update>
	
	<delete id="deleteReview">
		DELETE FROM MYREVIEW
		WHERE REVIEW_ID = #{review_id}
	</delete>
	
	<select id="selectScoreCount" resultType="map">
<!-- 		SELECT REVIEW_SCORE, COUNT(*) AS count -->
<!-- 		FROM MYREVIEW -->
<!-- 		WHERE MEM_ID = #{mem_id} -->
<!-- 		GROUP BY REVIEW_SCORE -->
<!-- 		ORDER BY REVIEW_SCORE DESC -->
		SELECT R.REVIEW_SCORE, COUNT(*) AS count 
		FROM MYREVIEW R
		JOIN PRODUCT P
		ON P.PRODUCT_ID = R.PRODUCT_ID AND P.MEM_ID=#{id}
		GROUP BY REVIEW_SCORE
		ORDER BY REVIEW_SCORE DESC
	</select>
	
	<select id="selectReviewHistoryCount">
		SELECT COUNT(*)
		  FROM MYREVIEW R
				JOIN MEMBER M ON R.MEM_ID = M.MEM_ID
				JOIN PRODUCT P ON R.PRODUCT_ID = P.PRODUCT_ID
				JOIN MEMBER M1 ON P.MEM_ID = M1.MEM_ID
		WHERE R.MEM_ID = #{mem_id}
		ORDER BY R.REVIEW_DATE DESC;
	</select>
	
	<select id="selectGoodStore">
	  SELECT 
<!-- 	    R.REVIEW_SCORE, -->
	    COUNT(*) AS count
	FROM MYREVIEW R
	JOIN PRODUCT P
	    ON P.PRODUCT_ID = R.PRODUCT_ID
	    AND P.MEM_ID = #{mem_id}
	GROUP BY R.REVIEW_SCORE
	HAVING R.REVIEW_SCORE = 2 AND COUNT(*) >= 3;
	</select>
</mapper>