<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.goodbuy.mapper.ProductMapper">
	
	<!--판매 상품 리스트 조회  -->
	<select id="selectProductList" resultType="product">
		SELECT 
			P.*,M.MEM_NICK
		  FROM 
		  	PRODUCT P JOIN MEMBER M ON P.MEM_ID = M.MEM_ID
		 WHERE 
		 	P.MEM_ID = #{mem_id}
		ORDER BY PRODUCT_REG_DATE DESC;
	</select>
	<!-- 판매상품 상위 4개 조회 -->
	<select id="selectLimitProductList" resultType="product">
		SELECT 
			P.*,M.MEM_NICK
		  FROM 
		  	PRODUCT P JOIN MEMBER M ON P.MEM_ID = M.MEM_ID
		 WHERE 
		 	P.MEM_ID = #{mem_id}
		ORDER BY PRODUCT_REG_DATE DESC
		LIMIT 3
	</select>
	
	<!--판매 상품 리스트 갯수 조회  -->
	<select id="salesListCount" resultType="int">
		SELECT COUNT(*)
		  FROM PRODUCT
		 WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- 헤더 카테고리 가져오기 -->
	<select id="cateSearch" resultType="Map">
		SELECT *
		FROM COMMONCODE
		WHERE CODETYPE_ID = 'category'
	</select>
	
	<!-- 메인화면 추천상품 가져오기 -->
	<select id="getRecommendedItem" resultType="Map">
		SELECT 
			pro.PRODUCT_PIC1
			, pro.PRODUCT_CATEGORY
			, pro.PRODUCT_TRADE_ADR1
			, pro.PRODUCT_ID
			, pro.PRODUCT_TITLE
			, pro.PRODUCT_PRICE
			, mem.MEM_NICK
			, REPLACE(FORMAT(pro.PRODUCT_REG_DATE, 'yyyyMMddHHmmss'), ',', '') AS PRODUCT_REG_DATE
			, pro.PRODUCT_REG_DATE
			, pro.PRODUCT_STATUS
		FROM PRODUCT pro 
		JOIN MEMBER mem
		ON pro.MEM_ID = mem.MEM_ID
		ORDER BY PRODUCT_REG_DATE DESC
		<if test="startRow != null || listLimit != null">
			LIMIT #{startRow}
			     , #{listLimit}
		</if>
	</select>
	
	<!-- 새 상품ID 조회 -->
	<select id="newProductId" resultType="int">
		SELECT IFNULL(MAX(PRODUCT_ID), 0) + 1
		FROM PRODUCT
	</select>
	
	<!-- 상품 등록 -->
	<insert id="insertProduct" >
		INSERT
		INTO PRODUCT
		VALUES (
			#{vo.product_id}
			, #{vo.product_title}
			, #{sId}
			, #{vo.product_intro}
			, #{vo.product_shipping_fee}
			, #{vo.product_price}
			, #{vo.product_discount_status}
			, #{vo.product_category}
			, CURRENT_TIMESTAMP
			, #{vo.product_pic1}
			, #{vo.product_pic2}
			, #{vo.product_pic3}
			, #{vo.product_trade_adr1}
			, #{vo.advertisement_status}
			, 0
			, 0
		)
	</insert>
	
	<!-- 검색필터별 조회 -->
	<select id="searchFliterList" resultType="map">
		SELECT 
			pro.PRODUCT_PIC1
			, pro.PRODUCT_CATEGORY
			, pro.PRODUCT_TRADE_ADR1
			, pro.PRODUCT_ID
			, pro.PRODUCT_TITLE
			, pro.PRODUCT_PRICE
			, mem.MEM_NICK
			, REPLACE(FORMAT(pro.PRODUCT_REG_DATE, 'yyyyMMddHHmmss'), ',', '') AS PRODUCT_REG_DATE
			, pro.PRODUCT_REG_DATE
			, pro.PRODUCT_STATUS
		FROM PRODUCT pro 
		JOIN MEMBER mem
		ON pro.MEM_ID = mem.MEM_ID
		JOIN COMMONCODE com
		ON pro.PRODUCT_CATEGORY = com.CODE_NAME
		WHERE
		<choose>
			<when test="cate != null">
				com.CODE_ID = #{cate} 
			</when>
			<otherwise>
				com.CODE_ID = 0 
			</otherwise>
		</choose>
		<choose>
			<when test="product_status == 0">
				AND 
					PRODUCT_STATUS = #{product_status}
			</when>
			<otherwise>
				AND
					(PRODUCT_STATUS BETWEEN 0 AND 2)
			</otherwise>
		</choose>
		<if test="price_end != 0">
			AND 
				PRODUCT_PRICE <![CDATA[>=]]> #{price_start}
			AND 
				PRODUCT_PRICE <![CDATA[<=]]> #{price_end}	
		</if>
		<if test="product_trade_adr1 != null">
			AND
				PRODUCT_TRADE_ADR1 LIKE CONCAT('%', #{product_trade_adr1}, '%')
		</if>
		<if test="search_keyword != null">
			AND
				(mem.MEM_NICK LIKE CONCAT('%', #{search_keyword}, '%')
				OR pro.MEM_ID LIKE CONCAT('%', #{search_keyword}, '%')
				OR pro.PRODUCT_TITLE LIKE CONCAT('%', #{search_keyword}, '%')
				OR pro.PRODUCT_INTRO LIKE CONCAT('%', #{search_keyword}, '%')
				OR pro.PRODUCT_TRADE_ADR1 LIKE CONCAT('%', #{search_keyword}, '%')
				OR pro.PRODUCT_CATEGORY LIKE CONCAT('%', #{search_keyword}, '%'))
		</if>
		ORDER BY PRODUCT_REG_DATE DESC
		<if test="startRow != null || listLimit != null">
			LIMIT #{startRow}
			     , #{listLimit}
		</if>
	</select>
	
	<!-- 상품 상세정보 조회 -->
	<select id="productSearch" resultType="product">
		SELECT pro.PRODUCT_PIC1
			   , pro.PRODUCT_PIC2
			   , pro.PRODUCT_PIC3
			   , pro.PRODUCT_TRADE_ADR1
			   , pro.PRODUCT_TITLE
			   , pro.PRODUCT_INTRO
			   , pro.product_shipping_fee
			   , pro.PRODUCT_PRICE
			   , pro.PRODUCT_ID
			   , pro.MEM_ID
			   , pro.PRODUCT_CATEGORY
			   , mem.MEM_NICK
			   , mem.MEM_PROFILE
			   , pro.PRODUCT_REG_DATE
			   , pro.PRODUCT_STATUS
			   , pro.PRODUCT_DISCOUNT_STATUS
			   , pro.VIEW_COUNT
		FROM PRODUCT pro JOIN MEMBER mem
		ON pro.MEM_ID = mem.MEM_ID
		WHERE pro.PRODUCT_ID = #{product_id}
	</select>
	
	<!-- 상품 조회수 증가 -->
	<update id="plusViewCount">
		UPDATE PRODUCT
		SET VIEW_COUNT = PRODUCT.VIEW_COUNT + 1
		WHERE PRODUCT_ID = #{product_id}
	</update>
	
	<!-- 상품 찜 여부 조회 -->
	<select id="checkWishlist" resultType="wish">
		SELECT WISHLIST_ID, COUNT(WISHLIST_ID) AS WISHLIST_COUNT
		FROM WISHLIST
		WHERE MEM_ID = #{sId}
		AND PRODUCT_ID = #{product_id}
		GROUP BY WISHLIST_ID
	</select>
	
	<!-- 같은 판매자 상품 조회 -->
	<select id="searchSellerProduct" resultType="map">
		SELECT pro.PRODUCT_PIC1
				, pro.PRODUCT_CATEGORY
				, pro.PRODUCT_TRADE_ADR1
				, pro.PRODUCT_ID
				, pro.PRODUCT_TITLE
				, pro.PRODUCT_PRICE
				, mem.MEM_NICK
				, REPLACE(FORMAT(pro.PRODUCT_REG_DATE, 'yyyyMMddHHmmss'), ',', '') AS PRODUCT_REG_DATE
				, pro.PRODUCT_STATUS
		FROM PRODUCT pro
		JOIN MEMBER mem
		ON pro.MEM_ID = mem.MEM_ID
		WHERE pro.MEM_ID = #{mem_id}
		<if test="product_id != 0">
			AND pro.PRODUCT_ID NOT IN (#{product_id})
		</if>
		ORDER BY pro.PRODUCT_REG_DATE DESC
	</select>
	
	<!-- 비슷한 상품 조회 -->
	<select id="searchSameCategoryProduct" resultType="map">
		SELECT pro.PRODUCT_PIC1
				, pro.PRODUCT_CATEGORY
				, pro.PRODUCT_TRADE_ADR1
				, pro.PRODUCT_ID
				, pro.PRODUCT_TITLE
				, pro.PRODUCT_PRICE
				, mem.MEM_NICK
				, REPLACE(FORMAT(pro.PRODUCT_REG_DATE, 'yyyyMMddHHmmss'), ',', '') AS PRODUCT_REG_DATE
				, pro.PRODUCT_STATUS
		FROM PRODUCT pro
		JOIN MEMBER mem
		ON pro.MEM_ID = mem.MEM_ID
		WHERE pro.PRODUCT_CATEGORY = #{product_category}
		AND pro.PRODUCT_ID NOT IN (#{product_id})
		AND pro.PRODUCT_STATUS BETWEEN 0 AND 2
		ORDER BY PRODUCT_REG_DATE DESC
	</select>
	
	<!-- 상품 신고 -->
	<insert id="itemReporting">
	<selectKey resultType="int" order="BEFORE"  keyProperty="report_id">
		SELECT IFNULL(MAX(REPORT_ID), 0)
		FROM PRODUCT_REPORTS
	</selectKey>
		INSERT
		INTO PRODUCT_REPORTS
		VALUES(
			#{report_id} + 1 
			, #{reporter_id}
			, #{product_id}
			, CURRENT_TIMESTAMP
			, #{reason}
			, '접수'
			, null
			, null
			, null
		)
	</insert>
	
	<!-- 상점페이지 조회 -->
	<select id="searchSellerShop" resultType="map">
		SELECT mem.MEM_PROFILE
				 , mem.MEM_NICK
		         , mem.MEM_ID
		         , mem.MEM_INTRO
		FROM MEMBER mem
		WHERE mem.MEM_NICK = #{mem_nick}
	</select>
	
	<!-- 상점페이지 셀러 리뷰목록 조회 -->
	<select id="searchSellerReview" resultType="map">
		SELECT rev.MEM_ID AS REVIEWER
				, rev.REVIEW_CONTENT
		        , rev.PRODUCT_TITLE
		        , rev.REVIEW_SCORE
		        , rev.review_options
		        , pro.MEM_ID AS SELLER
		        , pro.PRODUCT_PIC1
		FROM MYREVIEW rev
		JOIN PRODUCT pro
		ON rev.PRODUCT_ID = pro.PRODUCT_ID
        WHERE pro.MEM_ID = #{mem_id}
	</select>
	
	<!-- 셀러 리뷰 총 갯수 조회 -->
	<select id="searchSellerScore" resultType="map">
		SELECT SUM(CASE WHEN rev.REVIEW_SCORE = 0 THEN 1 ELSE 0 END) AS Bad
				, SUM(CASE WHEN rev.REVIEW_SCORE = 1 THEN 1 ELSE 0 END) AS Good
		        , SUM(CASE WHEN rev.REVIEW_SCORE = 2 THEN 1 ELSE 0 END) AS Best
		FROM MYREVIEW rev
		JOIN PRODUCT pro
		ON rev.PRODUCT_ID = pro.PRODUCT_ID
		WHERE pro.MEM_ID = #{mem_id}
	</select>
	
	<select id="productContent" resultType="map">
		SELECT *
		FROM PRODUCT
		WHERE PRODUCT_ID = #{product_ID};
	</select>
	
	<!-- 구매상품 리스트 조회 -->
	<select id="selectOrderList">
		SELECT 
			  O.PAY_ID
			, O.PRODUCT_ID
			, P.PRODUCT_TITLE 
			, P.PRODUCT_PRICE
			, P.PRODUCT_CATEGORY
			, P.PRODUCT_STATUS
			, M.MEM_NICK
			, M.MEM_ID
			, P.PRODUCT_TRADE_ADR1
			, R.REVIEW_CNT
			, R.REVIEW_SCORE
		FROM PAYINFO O 
		JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID
		JOIN MEMBER M ON P.MEM_ID = M.MEM_ID
		LEFT JOIN (SELECT COUNT(REVIEW_ID) AS REVIEW_CNT, PRODUCT_ID ,REVIEW_SCORE
					 FROM MYREVIEW
					WHERE MEM_ID = #{mem_id}
					GROUP BY PRODUCT_ID,REVIEW_SCORE) R
		    ON R.PRODUCT_ID = O.PRODUCT_ID
		WHERE O.BUYER_ID = #{mem_id}
	</select>
	
	<!-- 상품수정시 원본 이미지 가져오기 -->
	<select id="getProductPic">
		SELECT PRODUCT_PIC1, PRODUCT_PIC2, PRODUCT_PIC3, MEM_ID
		FROM PRODUCT
		WHERE PRODUCT_ID = #{product_id}
	</select>
	
	<!-- 상품수정 로직 -->
	<select id="productUpdate">
		UPDATE PRODUCT
		SET
			PRODUCT_TITLE = #{vo.product_title}
			, PRODUCT_INTRO = #{vo.product_intro}
			, PRODUCT_SHIPPING_FEE = #{vo.product_shipping_fee}
			, PRODUCT_PRICE = #{vo.product_price}
			, PRODUCT_DISCOUNT_STATUS = #{vo.product_discount_status}
			, PRODUCT_CATEGORY = #{vo.product_category}
			, PRODUCT_PIC1 = #{vo.product_pic1}
			, PRODUCT_PIC2 = #{vo.product_pic2}
			, PRODUCT_PIC3 = #{vo.product_pic3}
			, PRODUCT_TRADE_ADR1 = #{vo.product_trade_adr1}
			, PRODUCT_STATUS = #{vo.product_status}
		WHERE PRODUCT_ID = #{product_id}
	</select>
	
	<!-- 상품삭제 로직 -->
	<delete id="productRemove">
		DELETE
		FROM PRODUCT
		WHERE PRODUCT_ID = #{product_ID}
	</delete>
	
	<!-- 구매상품 갯수 조회 -->
<!-- 	<select id="selectOrderCount" resultType="int"> -->
<!-- 		SELECT COALESCE(COUNT(*), 0) as ORDERCOUNT, P.PRODUCT_ID, M.MEM_ID as SELLER_ID -->
<!-- 		FROM PRODUCT_ORDER O -->
<!-- 		JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID -->
<!-- 		JOIN MEMBER M ON M.MEM_ID = P.MEM_ID   판매자와 조인 -->
<!-- 		WHERE O.BUYER_ID = #{mem_id}   구매자 필터 -->
<!-- 		GROUP BY P.PRODUCT_ID, M.MEM_ID; -->
<!-- 	</select> -->

	<select id="selectOrderCount" resultType="int">
	    SELECT COALESCE(COUNT(*), 0)
	    FROM (
	        SELECT COALESCE(COUNT(*), 0) as ORDERCOUNT
	        FROM PAYINFO O 
	        	JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID 
	        	JOIN MEMBER M ON M.MEM_ID = P.MEM_ID 
	        WHERE O.BUYER_ID = #{mem_id}
	        GROUP BY P.PRODUCT_ID, M.MEM_ID
	    ) TEMP
	</select>
	
	<update id="updateProductStatus">
		 UPDATE PRODUCT
	     SET PRODUCT_STATUS = '3'
	     WHERE PRODUCT_ID = #{product_id}
	</update>
	
	<!-- 채팅에서 상품 상태 변경 -->
	<update id="updateChatProductStatus">
		UPDATE PRODUCT
		   SET PRODUCT_STATUS = #{state}
		 WHERE PRODUCT_ID = #{product_id}
	</update>
	
	
</mapper>