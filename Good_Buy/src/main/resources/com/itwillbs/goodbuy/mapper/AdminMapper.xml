<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.goodbuy.mapper.AdminMapper">
	<!-- [ 공통코드 ] -->
	<!-- 공통코드 등록 - INSERT -->
	<insert id="insertCommonCode">
		INSERT 
		  INTO COMMONCODETYPE
		VALUES (
			#{CODETYPE_ID}
		    , #{CODETYPE_NAME}
		    , #{DESCRIPTION}
		    , 1						-- 1: 사용, 2: 미사용
		)
	</insert>
	
	<!-- 공통코드 등록(상세코드) - INSERT -->
	<insert id="insertCommonCodeType">
		INSERT 
		  INTO COMMONCODE
		VALUES 
		<foreach item="code" collection="subCodes" separator=",">
            (
	            #{code.CODETYPE_ID}
	            , #{code.CODE_ID}
	            , #{code.CODE_NAME}
	            , #{code.CODE_DESCRIPTION}
	            , #{code.CODE_STATUS}
	            , #{code.CODE_SEQ}
            )
        </foreach>
     </insert>
     
     <!-- 공통코드 목록 조회 - SELECT -->
     <select id="selectCommonCodes">
     	SELECT 
				M.CODETYPE_ID
			   , M.CODETYPE_NAME
		       , M.DESCRIPTION AS MAIN_DESC
			   , S.CODE_ID
		       , S.CODE_NAME
		       , S.DESCRIPTION AS SUB_DESC
		       , S.CODE_STATUS
		       , S.CODE_SEQ
		  FROM COMMONCODETYPE M 
		  JOIN COMMONCODE S
		    ON M.CODETYPE_ID = S.CODETYPE_ID
		 WHERE 1 = 1
		 <if test="param.searchValue != null">
		 	  AND M.CODETYPE_NAME LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR M.CODETYPE_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR M.DESCRIPTION LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR S.CODE_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR S.CODE_NAME LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR S.DESCRIPTION LIKE CONCAT('%', #{param.searchValue}, '%')
		 </if>
		 ORDER BY
	 	<choose>
			<when test='param.orderColumn.equals("CODETYPE_ID")'>M.CODETYPE_ID</when>
			<when test='param.orderColumn.equals("CODE_ID")'>S.CODE_ID</when>
			<otherwise>CODETYPE_ID</otherwise>
		</choose>
		<if test='param.orderDir.equals("asc")'>ASC</if>
		<if test='param.orderDir.equals("desc")'>DESC</if>
		 LIMIT
		 	   #{param.start}
		 	   , #{param.length}
     </select>
     
     <!-- 공통코드 컬럼 수 조회 - SELECT -->
     <select id="selectCommonCodesTotal" resultType="int">
     	SELECT COUNT(*)
		  FROM COMMONCODETYPE M 
		  JOIN COMMONCODE S
		  ON M.CODETYPE_ID = S.CODETYPE_ID
     </select>
     
     <!-- 공통코드 검색 컬럼 수 조회 - SELECT -->
     <select id="selectCommonCodesFiltered" resultType="int">
     	SELECT COUNT(*)
		  FROM COMMONCODETYPE M 
		  JOIN COMMONCODE S
		    ON M.CODETYPE_ID = S.CODETYPE_ID
		 WHERE 1 = 1
		 <if test="param.searchValue != null">
		 	  AND M.CODETYPE_NAME LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR M.CODETYPE_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR M.DESCRIPTION LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR S.CODE_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR S.CODE_NAME LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR S.DESCRIPTION LIKE CONCAT('%', #{param.searchValue}, '%')
		 </if>
     </select>
     
     <!-- 공통코드 수정 - UPDATE -->
     <update id="updateCommonCodes">
     	UPDATE COMMONCODETYPE M, COMMONCODE S
		   SET 
		    	M.CODETYPE_NAME = #{CODETYPE_NAME}
			    , M.DESCRIPTION = #{CODETYPE_DESC}
			    , S.CODE_ID = #{CODE_ID}
			    , S.CODE_NAME = #{CODE_NAME}
			    , S.DESCRIPTION = #{CODE_DESC}
			    , S.CODE_STATUS = #{CODE_STATUS}
			    , S.CODE_SEQ = #{CODE_SEQ}
		 WHERE
				M.CODETYPE_ID = #{OLD_CODETYPE_ID}
			    AND S.CODETYPE_ID = #{OLD_CODETYPE_ID}
			    AND S.CODE_ID = #{OLD_CODE_ID}
     </update>
     
     <!-- 공통코드 삭제 - DELETE -->
     <delete id="deleteCommonCodes">
     	DELETE FROM COMMONCODE
     	 WHERE CODETYPE_ID = #{CODETYPE_ID}
     	   AND CODE_ID = #{CODE_ID}
     </delete>
     
     <!-- 사용되지 않는 공통코드(상위코드) 삭제 - DELETE -->
     <delete id="deleteDeprecatedCommonCode">
     	DELETE FROM COMMONCODETYPE
     	 WHERE NOT EXISTS (
            SELECT 1
            FROM COMMONCODE
            WHERE COMMONCODETYPE.CODETYPE_ID = COMMONCODE.CODETYPE_ID
        )
     </delete>
     
     <!-- [ 회원관리 ] -->
     <!-- 전체 회원 목록 조회 - SELECT -->
     <select id="selectMemberList" resultType="member">
     	SELECT MEM_ID
			   , MEM_NAME
		       , MEM_NICK
		       , MEM_BIRTHDAY
		       , MEM_EMAIL
		       , (CASE WHEN MEM_GENDER = "M" THEN "남"
					   WHEN MEM_GENDER = "F" THEN "여" END) AS MEM_GENDER
		       , (CASE WHEN MEM_PHONE IS NULL OR MEM_PHONE = '' THEN ''
					   ELSE CONCAT(SUBSTR(MEM_PHONE, 1, 3), '-', SUBSTR(MEM_PHONE, 4, 4), '-', SUBSTR(MEM_PHONE, 8, 4))
		                END) AS MEM_PHONE
		       , MEM_POST_CODE
		       , MEM_ADDRESS1
		       , MEM_ADDRESS2
		       , MEM_GRADE
		       , MEM_STATUS
		       , MEM_REG_DATE
		       , MEM_WITHDRAW_DATE
		       , MEM_PROFILE
		       , MEM_INTRO
		       , SNS_STATUS
		       , AUTH_STATUS
		  FROM MEMBER
		 WHERE 1 = 1
			<if test="param.mem_status != null and param.mem_status != 0">
		 	   AND MEM_STATUS = #{memStatus}
		 	</if>
		 	<if test='param.mem_grade != null and !param.mem_grade.equals("전체")'>
		 	   AND MEM_GRADE = #{memGrade}
		 	</if>
		 	<if test="param.searchValue != null and !param.searchValue.equals('')">
		 	   AND (MEM_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_NAME LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_NICK LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_EMAIL LIKE CONCAT('%', #{param.searchValue}, '%')) 
		 	</if>
		 ORDER BY 
			<choose>
				<when test='param.orderColumn.equals("mem_id")'>MEM_ID</when>
				<when test='param.orderColumn.equals("mem_name")'>MEM_NAME</when>
				<when test='param.orderColumn.equals("mem_nick")'>MEM_NICK</when>
				<when test='param.orderColumn.equals("mem_email")'>MEM_EMAIL</when>
				<when test='param.orderColumn.equals("mem_reg_date")'>MEM_REG_DATE</when>
				<otherwise>MEM_REG_DATE</otherwise>
			</choose>
			<if test='param.orderDir.equals("asc")'>ASC</if>
			<if test='param.orderDir.equals("desc")'>DESC</if>
		  LIMIT
		 	   #{param.start}
		 	   , #{param.length}
     </select>
     
     <!-- 회원목록 전체 컬럼 수 조회 - SELECT -->
     <select id="selectMemberListTotal" resultType="int">
     	SELECT COUNT(*)
     	  FROM MEMBER
     </select>
     
     <!-- 회원목록 필터링 후 컬럼 수 조회 - SELECT -->
     <select id="selectMemberListFiltered" resultType="int">
     	SELECT COUNT(*)
     	  FROM MEMBER
     	 WHERE 1 = 1
			<if test="param.mem_status != null and param.mem_status != 0">
		 	   AND MEM_STATUS = #{param.mem_status}
		 	</if>
		 	<if test='param.mem_grade != null and !param.mem_grade.equals("전체")'>
		 	   AND MEM_GRADE = #{param.mem_grade}
		 	</if>
		 	<if test="param.searchValue != null and !param.searchValue.equals('')">
		 	   AND (MEM_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_NAME LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_NICK LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_EMAIL LIKE CONCAT('%', #{param.searchValue}, '%')) 
		 	</if>
     </select>
     
     <!-- 회원 상세 정보 조회 - SELECT -->
     <select id="selectMember" resultType="member">
     	SELECT MEM_ID
			   , MEM_NAME
		       , MEM_NICK
		       , MEM_BIRTHDAY
		       , MEM_EMAIL
		       , (CASE WHEN MEM_GENDER = "M" THEN "남"
					   WHEN MEM_GENDER = "F" THEN "여" END) AS MEM_GENDER
		       , (CASE WHEN MEM_PHONE IS NULL OR MEM_PHONE = '' THEN ''
					   ELSE CONCAT(SUBSTR(MEM_PHONE, 1, 3), '-', SUBSTR(MEM_PHONE, 4, 4), '-', SUBSTR(MEM_PHONE, 8, 4))
		                END) AS MEM_PHONE
		       , MEM_POST_CODE
		       , MEM_ADDRESS1
		       , MEM_ADDRESS2
		       , MEM_GRADE
		       , MEM_STATUS
		       , MEM_REG_DATE
		       , MEM_WITHDRAW_DATE
		       , MEM_PROFILE
		       , MEM_INTRO
		       , SNS_STATUS
		       , AUTH_STATUS
		FROM MEMBER
		WHERE MEM_ID = #{mem_id}
     </select>
     
     <!-- 회원 상태 수정 - UPDATE -->
     <update id="updateMemberInfo">
     	UPDATE MEMBER
     	   SET MEM_GRADE = #{mem_grade}
     	   	   , MEM_STATUS = #{mem_status}
     	 WHERE MEM_ID = #{mem_id}
     </update>
     
     <!-- 회원 삭제 - DELETE -->
     <delete id="deleteMember">
     	DELETE FROM MEMBER
     	 WHERE MEM_ID = #{mem_id}
     </delete>
     
     <!-- [ 신고 상품 관리 ] -->
     <!-- 신고된 상품 전체 컬럼 수 조회 - SELECT -->
     <select id="selectProductReportTotal" resultType="int">
     	SELECT COUNT(*)
		  FROM PRODUCT_REPORTS
     </select>
     
      <!-- 신고된 상품 필터링 후 컬럼 수 조회 - SELECT -->
     <select id="selectProductReportFiltered" resultType="int">
     	SELECT COUNT(*)
		  FROM PRODUCT_REPORTS R
		  JOIN PRODUCT P
		    ON R.PRODUCT_ID = P.PRODUCT_ID
		 WHERE 1 = 1
		<if test="param.status != null and param.status != ''">
		   AND STATUS = #{param.status}
		</if>
		<if test="param.searchValue != null and !param.searchValue.equals('')">
		   AND (R.REPORTER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
			   OR R.REPORTER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR R.PRODUCT_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR P.PRODUCT_TITLE LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR R.STATUS LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR R.REASON LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR R.ADMIN_ID LIKE CONCAT('%', #{param.searchValue}, '%'))
		</if>
		<if test="param.searchDate != null and !param.searchDate.equals('')">
		   AND DATE(R.REPORT_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10)
		</if>
     </select>
     
     <!-- 필터링 된 신고 상품 목록 조회 - SELECT -->
     <select id="selectProductReportList" resultType="map">
     	SELECT R.REPORT_ID
			   , R.REPORTER_ID
		       , R.PRODUCT_ID
		       , P.PRODUCT_TITLE
		       , DATE_FORMAT(R.REPORT_DATE, '%Y-%m-%d %H:%i:%s') AS REPORT_DATE
		       , R.REASON
		       , R.STATUS
		       , R.ACTION_REASON
		       , R.ADMIN_ID
		       , DATE_FORMAT(R.ACTION_DATE, '%Y-%m-%d %H:%i:%s') AS ACTION_DATE
		  FROM PRODUCT_REPORTS R
		  JOIN PRODUCT P
		    ON R.PRODUCT_ID = P.PRODUCT_ID
		 WHERE 1 = 1
		 <if test="param.status != null and param.status != ''">
		   AND STATUS = #{param.status}
		</if>
		<if test="param.searchValue != null and !param.searchValue.equals('')">
		   AND 
		   	  (
			   R.REPORTER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR R.PRODUCT_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR P.PRODUCT_TITLE LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR R.STATUS LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR R.REASON LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR R.ADMIN_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	      )
		</if>
		<if test="param.searchDate != null and !param.searchDate.equals('')">
		   AND DATE(R.REPORT_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10)
		</if>
		 ORDER BY 
			<choose>
				<when test='param.orderColumn.equals("REPORTER_ID")'>R.REPORTER_ID</when>
				<when test='param.orderColumn.equals("PRODUCT_ID")'>R.PRODUCT_ID</when>
				<when test='param.orderColumn.equals("PRODUCT_TITLE")'>P.PRODUCT_TITLE</when>
				<when test='param.orderColumn.equals("REPORT_DATE")'>R.REPORT_DATE</when>
				<when test='param.orderColumn.equals("REASON")'>R.REASON</when>
				<when test='param.orderColumn.equals("STATUS")'>R.STATUS</when>
				<when test='param.orderColumn.equals("ACTION_REASON")'>R.ACTION_REASON</when>
				<when test='param.orderColumn.equals("ADMIN_ID")'>R.ADMIN_ID</when>
				<when test='param.orderColumn.equals("ACTION_DATE")'>R.ACTION_DATE</when>
				<otherwise>R.REPORT_DATE</otherwise>
			</choose>
			<if test='param.orderDir.equals("asc")'>ASC</if>
			<if test='param.orderDir.equals("desc")'>DESC</if>
		  LIMIT
		 	   #{param.start}
		 	   , #{param.length}
     </select>
     
     <!-- 신고 상품 조치 및 수정 - UPDATE -->
     <!-- {PRODUCT_ID=5, REPORT_ID=9, ADMIN_ID=admin, STATUS=처리완료, ACTION_REASON=신고사유} -->
     <update id="updateProductReport">
     	UPDATE PRODUCT_REPORTS A LEFT JOIN PRODUCT B
     	    ON A.PRODUCT_ID = B.PRODUCT_ID
		<set>
			   A.STATUS = #{STATUS}
			   , A.ACTION_REASON = #{ACTION_REASON}
			   , A.ADMIN_ID = #{ADMIN_ID}
			<if test='STATUS != null or STATUS.equals("처리완료")'>
     	   	   , B.PRODUCT_STATUS = 4
			</if>
			<if test='STATUS != null or STATUS.equals("기각")'>
     	   	   , B.PRODUCT_STATUS = 0
			</if>
		</set>
     	 WHERE A.REPORT_ID = CAST(#{REPORT_ID} AS UNSIGNED)
		<if test='STATUS != null or STATUS.equals("처리완료")'>
     	   AND B.PRODUCT_ID = CAST(#{PRODUCT_ID} AS UNSIGNED)
		</if>
     </update>
     
     <!-- [ 신고 회원 관리 ] -->
     <!-- 신고된 회원 전체 컬럼 수 조회 - SELECT -->
     <select id="selectUserReportTotal" resultType="int">
     	SELECT COUNT(*)
		  FROM USER_REPORTS
     </select>
     
      <!-- 신고된 회원 필터링 후 컬럼 수 조회 - SELECT -->
     <select id="selectUserReportFiltered" resultType="int">
     	SELECT COUNT(*)
		  FROM USER_REPORTS
		 WHERE 1 = 1
		<if test="param.status != null and param.status != ''">
		   AND STATUS = #{param.status}
		</if>
		<if test="param.searchValue != null and !param.searchValue.equals('')">
		   AND (REPORTER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
			   OR REPORTED_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR STATUS LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR REASON LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR ADMIN_ID LIKE CONCAT('%', #{param.searchValue}, '%'))
		</if>
		<if test="param.searchDate != null and !param.searchDate.equals('')">
		   AND DATE(REPORT_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10)
		</if>
     </select>
     
     <!-- 필터링 된 신고 회원 목록 조회 - SELECT -->
     <select id="selectUserReportList" resultType="map">
     	SELECT REPORT_ID
			   , REPORTER_ID
			   , REPORTED_ID
			   , ROOM_ID
		       , DATE_FORMAT(REPORT_DATE, '%Y-%m-%d %H:%i:%s') AS REPORT_DATE
		       , REASON
		       , STATUS
		       , ACTION_REASON
		       , ADMIN_ID
		       , DATE_FORMAT(ACTION_DATE, '%Y-%m-%d %H:%i:%s') AS ACTION_DATE
		  FROM USER_REPORTS
		 WHERE 1 = 1
		 <if test="param.status != null and param.status != ''">
		   AND STATUS = #{param.status}
		</if>
		<if test="param.searchValue != null and !param.searchValue.equals('')">
		   AND 
		   	  (
			   REPORTER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR REPORTED_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR STATUS LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR REASON LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR ADMIN_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	 	      )
		</if>
		<if test="param.searchDate != null and !param.searchDate.equals('')">
		   AND DATE(REPORT_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10)
		</if>
		 ORDER BY 
			<choose>
				<when test='param.orderColumn.equals("REPORTER_ID")'>REPORTER_ID</when>
				<when test='param.orderColumn.equals("REPORTED_ID")'>REPORTED_ID</when>
				<when test='param.orderColumn.equals("REPORT_DATE")'>REPORT_DATE</when>
				<when test='param.orderColumn.equals("REASON")'>REASON</when>
				<when test='param.orderColumn.equals("STATUS")'>STATUS</when>
				<when test='param.orderColumn.equals("ACTION_REASON")'>ACTION_REASON</when>
				<when test='param.orderColumn.equals("ADMIN_ID")'>ADMIN_ID</when>
				<when test='param.orderColumn.equals("ACTION_DATE")'>ACTION_DATE</when>
				<otherwise>REPORT_DATE</otherwise>
			</choose>
			<if test='param.orderDir.equals("asc")'>ASC</if>
			<if test='param.orderDir.equals("desc")'>DESC</if>
		  LIMIT
		 	   #{param.start}
		 	   , #{param.length}
     </select>
     
     <!-- 신고 회원 조치 및 수정 - UPDATE -->
     <!-- {ROOM_ID=, REPORT_ID=2, REPORTER_ID=, REPORTED_ID=, ADMIN_ID=admin, STATUS=처리완료, ACTION_REASON=신고사유} -->
     <update id="updateUserReport">
     	UPDATE USER_REPORTS
		   SET STATUS = #{STATUS}
				, ACTION_REASON = #{ACTION_REASON}
				, ADMIN_ID = #{ADMIN_ID}
		 WHERE REPORT_ID = #{REPORT_ID}
		   AND ROOM_ID = #{ROOM_ID}
		   AND REPORTED_ID = #{REPORTED_ID}
     </update>
     
     <!-- 신고회원 경고횟수 업데이트 - UPDATE -->
     <!-- 
     		- 기존상태 NULL > 처리완료 시 경고 1 증가
     		- 기존상태 처리완료 > 기각 시 경고 1 감소
     		- 기존상태 기각 > 처리완료 시 경고 1 증가
     		- 나머지 경우 변화 없음 - 경고 횟수 유지
     		- GREATEST(a, b) : a, b 중 더 큰 값을 찾음 (같은 값을 비교하면 그 값이 리턴됨)
     -->
     <update id="updateUserReportCount">
     	UPDATE MEMBER A
		  JOIN (SELECT STATUS, REPORT_ID
		          FROM USER_REPORTS 
				 WHERE REPORT_ID = CAST(#{REPORT_ID} AS unsigned)) B
		  ON B.REPORT_ID = CAST(#{REPORT_ID} AS unsigned)
			SET A.REPORT_CNT = CASE 
				-- 기존상태 접수 > 처리완료 시 경고 1 누적
				WHEN B.STATUS = '접수' AND #{STATUS} = '처리완료' 
				THEN A.REPORT_CNT + 1 
		
				-- 기존상태 처리완료 > 기각 시 경고 1 감소
				WHEN B.STATUS = '처리완료' AND #{STATUS} = '기각' AND A.REPORT_CNT > 0 
				THEN GREATEST(A.REPORT_CNT - 1, 0)
				-- GREATEST(a, b) : a, b 중 더 큰 값을 찾음 (같은 값을 비교하면 그 값이 리턴됨)
		
				-- 기존 상태 기각 > 처리완료 시 경고 1 증가
				WHEN B.STATUS = '기각' AND #{STATUS} = '처리완료' 
				THEN A.REPORT_CNT + 1 
		
				-- 나머지 경우 변화 없음 - 경고 횟수 유지
				ELSE A.REPORT_CNT 
			END
		WHERE A.MEM_ID = #{REPORTED_ID};
     </update>
     
     <!-- [ 공지사항 관리 ] -->
     <!-- 공지사항 목록 전체 컬럼 수 조회 - SELECT -->
     <select id="selectNoticeListTotal" resultType="int">
     	SELECT COUNT(*)
     	  FROM NOTICE
     </select>
     
     <!-- 공지사항 필터링 후 전체 컬럼 수 조회 - SELECT -->
     <select id="selectNoticeListFiltered" resultType="int">
     	SELECT COUNT(*)
     	  FROM NOTICE
     	 WHERE 1 = 1
     	 	<if test="param.searchValue != null and !param.searchValue.equals('')">
		 	   AND (
			 	   	NOTICE_SUBJECT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR NOTICE_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   		)
		 	</if>
     </select>
     
     <!-- 공지사항 목록 필터링,검색 포함 조회 - SELECT -->
     <select id="selectNoticeList" resultType="notice">
     	SELECT *
		  FROM NOTICE
		 WHERE 1 = 1
		 	<if test="param.searchValue != null and !param.searchValue.equals('')">
		 	   AND (
		 	   		NOTICE_SUBJECT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR NOTICE_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	OR MEM_ID LIKE CONCAT('%', #{param.searchValue}, '%')
		 	    	)
		 	</if>
		 ORDER BY 
			<choose>
				<when test='param.orderColumn.equals("mem_id")'>MEM_ID</when>
				<when test='param.orderColumn.equals("notice_subject")'>NOTICE_SUBJECT</when>
				<when test='param.orderColumn.equals("notice_content")'>NOTICE_CONTENT</when>
				<when test='param.orderColumn.equals("notice_date")'>NOTICE_DATE</when>
				<when test='param.orderColumn.equals("notice_read_count")'>NOTICE_READ_COUNT</when>
				<otherwise>NOTICE_DATE</otherwise>
			</choose>
			<if test='param.orderDir.equals("asc")'>ASC</if>
			<if test='param.orderDir.equals("desc")'>DESC</if>
		  LIMIT
		 	   #{param.start}
		 	   , #{param.length}
     </select>
     
     <!-- 공지사항 첨부파일 목록 가져오기 - SELECT -->
     <select id="selectNoticeBoardFileList" resultType="notice">
		SELECT NOTICE_ID
		       , NOTICE_FILE
		  FROM NOTICE
		 WHERE 1 = 1
	       AND NOTICE_ID IN 
		<foreach collection="deleteItems" item="notice_id" index="index" open="(" close=")" separator=",">
			   #{notice_id}
		</foreach>
     </select>
     
     <!-- 공지사항 삭제 - DELETE -->
     <delete id="deleteNotice">
     	DELETE
     	  FROM NOTICE
     	 WHERE 1 = 1
	       AND NOTICE_ID IN 
		<foreach collection="deleteItems" item="notice_id" index="index" open="(" close=")" separator=",">
			   #{notice_id}
		</foreach>
     </delete>
     
     
     
     
     <!-- ************************************************************* -->
     <!-- FAQ 목록 가져오기 -->
     <select id="selectFaqList">
		SELECT *
		  FROM FAQ
		 WHERE 1 = 1
		 	<if test="param.faq_cate != null and param.faq_cate != 0">
		 	   AND FAQ_CATE = #{param.faq_cate}
		 	</if>
		 	<if test="param.list_status != null and param.list_status != 0">
		 	   AND LIST_STATUS = #{param.list_status}
		 	</if>
		 	<if test="param.searchValue != null and param.searchValue != ''">
		 	   AND FAQ_SUBJECT LIKE CONCAT('%', #{param.searchValue}, '%')
		 		OR FAQ_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	</if>
		 ORDER BY 
			<choose>
				<when test="param.orderColumn == 'FAQ_ID'">FAQ_ID</when>
				<when test="param.orderColumn == 'FAQ_SUBJECT'">FAQ_SUBJECT</when>
				<when test="param.orderColumn == 'FAQ_CONTENT'">FAQ_CONTENT</when>
				<when test="param.orderColumn == 'FAQ_CATE'">FAQ_CATE</when>
				<otherwise>FAQ_CATE</otherwise>
			</choose>
			<if test="param.orderDir == 'asc'">ASC</if>
			<if test="param.orderDir == 'desc'">DESC</if>
		  LIMIT
		 	   #{param.start}
		 	   , #{param.length}
		 </select>
    	
     <!-- FAQ 컬럼 수 조회 - SELECT -->
     <select id="selectFaqTotal" resultType="int">
     	SELECT COUNT(*)
     	FROM FAQ
     </select>
     
     <!-- FAQ 검색 컬럼 수 조회 - SELECT -->
     <select id="selectFaqFiltered" resultType="int">
     	SELECT COUNT(*)
		  FROM FAQ
		 WHERE 1 = 1
		 <if test="param.searchValue != null">
		 	  AND FAQ_SUBJECT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	   OR FAQ_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%')
		 </if>
     </select>
     
     <!-- FAQ 수정 -->
     <update id="updateFaqInfo">
     	UPDATE FAQ
     	   SET FAQ_SUBJECT = #{faq_subject}
     	   	   , FAQ_CONTENT = #{faq_content}
     	   	   , FAQ_CATE = #{faq_cate}
     	   	   , LIST_STATUS = #{list_status}
     	 WHERE FAQ_ID = #{faq_id}
     </update>
     
     <!-- FAQ 삭제 -->
     <delete id="deleteFaq">
		DELETE FROM FAQ
		WHERE 1=1
		AND FAQ_ID IN
		<foreach collection="deleteItems" item="faq_id" index="index" open="(" close=")" separator=",">
			   #{faq_id}
		</foreach>
     </delete>
     
     
     
     <!-- ************************************************************* -->
     <!-- 1:1 문의 전체 컬럼 수 조회 - SELECT -->
     <select id="selectEnquireTotal" resultType="int">
     	SELECT COUNT(*)
     	FROM SUPPORT
     </select>
     
     
     <!-- 1:1 문의 필터링 후 컬럼 수 조회 - SELECT -->
     <select id="selectEnquireListFiltered" resultType="int">
     	SELECT COUNT(*)
		FROM SUPPORT
		WHERE 1 = 1
		<if test="param.status != null and param.status != ''">
		   AND STATUS = #{param.status}
		</if>
		<if test="param.searchValue != null and !param.searchValue.equals('')">
		   AND (MEM_ID LIKE CONCAT('%', #{param.searchValue}, '%')
			   OR SUPPORT_SUBJECT LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR SUPPORT_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%')
	 	       OR REPLY_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%') 
	 	       OR STATUS LIKE CONCAT('%', #{param.searchValue}, '%'))
		</if>
		<if test="param.searchDate != null and !param.searchDate.equals('')">
		   AND (DATE(SUPPORT_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10)
		   	OR DATE(REPLY_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10))
		</if>
     </select>
     
     <!-- 필터링 된 1:1 문의 목록 조회 - SELECT -->
     <select id="selectEnquireList" resultType="map">
     	SELECT
     		SUPPORT_ID 
     		, SUPPORT_CATEGORY
		    , DATE_FORMAT(SUPPORT_DATE, '%Y-%m-%d %H:%i:%s') AS SUPPORT_DATE
     		, MEM_ID
		    , SUPPORT_SUBJECT
		    , SUPPORT_CONTENT
		    , SUPPORT_FILE
		    , DATE_FORMAT(REPLY_DATE, '%Y-%m-%d %H:%i:%s') AS REPLY_DATE
		    , REPLY_CONTENT
		    , STATUS
		FROM SUPPORT
		WHERE 1 = 1
			<if test="param.status != null and param.status != ''">
			   AND STATUS = #{param.status}
			</if>
			<if test="param.searchValue != null and !param.searchValue.equals('')">
			   AND (MEM_ID LIKE CONCAT('%', #{param.searchValue}, '%')
				   OR SUPPORT_SUBJECT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	       OR SUPPORT_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%')
		 	       OR REPLY_CONTENT LIKE CONCAT('%', #{param.searchValue}, '%') 
		 	       OR STATUS LIKE CONCAT('%', #{param.searchValue}, '%'))
			</if>
			<if test="param.searchDate != null and !param.searchDate.equals('')">
			   AND (DATE(SUPPORT_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10)
			   	OR DATE(REPLY_DATE) BETWEEN LEFT(#{param.searchDate}, 10) AND RIGHT(#{param.searchDate}, 10))
			</if>
		ORDER BY 
			<choose>
				<when test='param.orderColumn.equals("SUPPORT_CATEGORY")'>SUPPORT_CATEGORY</when>
				<when test='param.orderColumn.equals("SUPPORT_DATE")'>SUPPORT_DATE</when>
				<when test='param.orderColumn.equals("MEM_ID")'>MEM_ID</when>
				<when test='param.orderColumn.equals("REPLY_DATE")'>REPLY_DATE</when>
				<when test='param.orderColumn.equals("STATUS")'>STATUS</when>
				<otherwise>SUPPORT_DATE</otherwise>
			</choose>
			<if test='param.orderDir.equals("asc")'>ASC</if>
			<if test='param.orderDir.equals("desc")'>DESC</if>
		  LIMIT
		 	   #{param.start}
		 	   , #{param.length}
     </select>
     
     <!-- 1:1 문의 답글 등록(수정) - UPDATE -->
     <update id="updateReplyInfo">
     	UPDATE SUPPORT
		<set>
			   STATUS = #{STATUS}
			   , REPLY_CONTENT = #{REPLY_CONTENT}
			   , REPLY_DATE = CURRENT_TIMESTAMP
<!-- 			   , ADMIN_ID = #{ADMIN_ID} -->
		</set>
		WHERE SUPPORT_ID = #{SUPPORT_ID}
     </update>
     
     <!-- ******** 로그 AOP ******* -->
     <!-- 로그 저장 - INSERT -->
     <insert id="insertLog">
     	INSERT 
     	  INTO LOG
     	VALUES (
     		#{log.ADMIN_ID}
     		, #{log.MAPPER_ID}
     		, #{log.PROCESS_TIME}
     		, #{log.PROCESS_RESULT}
     		, #{log.IP_ADDRESS}
     	)
     </insert>
     
     
     <!-- ************************************************************* -->
     <!-- 거래내역 전체 컬럼 수 조회 - SELECT -->
     <select id="selectOrderListTotal" resultType="int">
     	SELECT COUNT(*)
		FROM PAYINFO pi JOIN PRODUCT pr
		on pi.PRODUCT_ID = pr.PRODUCT_ID
     </select>
     
     <!-- 거래내역 필터링 후 컬럼 수 조회 - SELECT -->
     <select id="selectOrderListFiltered" resultType="int">
     	SELECT COUNT(*)
		FROM PAYINFO pi JOIN PRODUCT pr
		on pi.PRODUCT_ID = pr.PRODUCT_ID
		WHERE 1=1
		<if test="param.status != null and param.status != ''">
        	AND pr.PRODUCT_STATUS = #{param.status}
		</if>
		<if test="param.searchValue != null and !param.searchValue.equals('')">
	        AND ( pi.SELLER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	             OR pi.BUYER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	             OR pr.PRODUCT_CATEGORY LIKE CONCAT('%', #{param.searchValue}, '%')
	             OR pr.PRODUCT_TITLE LIKE CONCAT('%', #{param.searchValue}, '%'))
		</if>
		<if test="param.searchDate != null and !param.searchDate.equals('')">
	        AND DATE(pi.PAY_DATE) BETWEEN LEFT(#{param.searchValue}, 10) 
	        AND RIGHT(#{param.searchValue}, 10)
		</if>
     </select>
     
     <!-- 필터링 된 거래내역 목록 조회 - SELECT -->
     <select id="selectOrderList" resultType="order">
     	SELECT pi.PAY_ID
			,pi.SELLER_ID
			 ,pi.PRODUCT_ID
		    ,pr.PRODUCT_CATEGORY
			,pr.PRODUCT_TITLE
			,pr.PRODUCT_PRICE
			,pi.BUYER_ID
			,pi.PAY_PRICE
			,pi.PAY_DATE
			,pi.PAY_ADDRESS
			,pi.PAY_STATUS 
		FROM PAYINFO pi JOIN PRODUCT pr
		ON pi.PRODUCT_ID = pr.PRODUCT_ID
		WHERE 1 = 1
		<if test="param.status != null and param.status != ''">
        	AND pi.PAY_STATUS = #{param.status}
		</if>
		<if test="param.searchValue != null and !param.searchValue.equals('')">
	        AND ( pi.SELLER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	             OR pi.BUYER_ID LIKE CONCAT('%', #{param.searchValue}, '%')
	             OR pr.PRODUCT_CATEGORY LIKE CONCAT('%', #{param.searchValue}, '%')
	             OR pr.PRODUCT_TITLE LIKE CONCAT('%', #{param.searchValue}, '%'))
	             OR pi.PAY_ADDRESS LIKE CONCAT('%', #{param.searchValue}, '%'))
		</if>
		<if test="param.searchDate != null and !param.searchDate.equals('')">
	        AND DATE(pi.PAY_DATE) BETWEEN SUBSTRING_INDEX(#{param.searchDate}, ' ~ ', 1)
	        AND SUBSTRING_INDEX(#{param.searchDate}, ' ~ ', -1)
		</if>
		ORDER BY 
			<choose>
				<when test='param.orderColumn.equals("product_category")'>pr.PRODUCT_TITLE</when>
				<when test='param.orderColumn.equals("product_price")'>pr.PRODUCT_PRICE</when>
				<when test='param.orderColumn.equals("pay_price")'>pi.PAY_DATE</when>
				<when test='param.orderColumn.equals("pay_date")'>pi.PAY_DATE</when>
				<otherwise>pi.PAY_DATE</otherwise>
			</choose>
			<if test='param.orderDir.equals("asc")'>ASC</if>
			<if test='param.orderDir.equals("desc")'>DESC</if>
		  LIMIT
		 	   #{param.start}
		 	   , #{param.length}
     </select>
     
     
     
</mapper>