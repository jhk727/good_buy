<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.goodbuy.mapper.PayMapper">
	<insert id="insertAccessToken">
		INSERT
		  INTO TOKENINFO
		VALUES (
			   #{id}                    -- 사용자 아이디
			 , #{token.user_seq_no}     -- 사용자 일련번호
			 , #{token.access_token}
			 , #{token.token_type}
			 , #{token.expires_in}
			 , #{token.refresh_token}
			 , #{token.scope}
		)	
	</insert>
	
	<!-- 기존 엑세스토큰 정보 조회 - SELECT -->
	<!-- 사용자일련번호(user_seq_no)가 일치하는 레코드의 엑세스토큰(access_token) 컬럼 조회 -->
	<select id="selectTokenInfo" resultType="string">
		SELECT ACCESS_TOKEN
		FROM TOKENINFO
		WHERE USER_SEQ_NO = #{token.user_seq_no}
	</select>
	
	<!-- 엑세스토큰 정보 갱신 - UPDATE -->
	<!-- 사용자일련번호(user_seq_no)가 일치하는 레코드의 정보 갱신(사용자일련번호 제외 나머지) -->
	<update id="updateAccessToken">
		UPDATE TOKENINFO
		SET
			access_token = #{token.access_token}
			, token_type = #{token.token_type}
			, expires_in = #{token.expires_in}
			, refresh_token = #{token.refresh_token}
			, scope = #{token.scope}
		WHERE USER_SEQ_NO = #{token.user_seq_no}
	</update>

	<select id="selectPayTokenInfo" resultType="payToken">
		SELECT *
		FROM TOKENINFO
		WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- 사용자 대표계좌 정보 조회 - SELECT -->
	<!-- token 객체의 user_seq_no 값과 일치하는 레코드의 user_seq_no 값 조회 -->
	<select id="selectRepresentAccount" resultType="string">
		SELECT USER_SEQ_NO
		FROM ACCOUNTINFO
		WHERE USER_SEQ_NO = #{token.user_seq_no}
	</select>
	
	<select id="selectRepresentAccountNum" resultType="string">
		SELECT FINTECH_USE_NUM
		FROM ACCOUNTINFO
		WHERE USER_SEQ_NO = #{token.user_seq_no}
	</select>
	
	<!-- 사용자 대표계좌 정보 등록 - INSERT -->
	<!-- token 객체의 user_seq_no 와 별도의 account_num_masked(임시), account_holder_name, fintech_use_num 등록 -->
	<insert id="insertRepresentAccount">
		INSERT
		INTO ACCOUNTINFO
		VALUES (
			#{token.user_seq_no}
			, #{account_num_masked}
			, #{account_holder_name}
			, #{fintech_use_num}
			, #{bank_code_std}
			, #{bank_name}
		)
	</insert>
	
	<!-- 사용자 대표계좌 정보 변경 - UPDATE -->
	<!-- token 객체의 user_seq_no 가 일치하는 레코드의 나머지 정보 변경 -->
	<update id="updateRepresentAccount">
		UPDATE ACCOUNTINFO
		SET
			ACCOUNT_NUM = #{account_num_masked}
			, ACCOUNT_HOLDER_NAME = #{account_holder_name}
			, FINTECH_USE_NUM = #{fintech_use_num}
			, ACCOUNT_BANK_CODE = #{bank_code_std}
			, BANK_NAME = #{bank_name}
		WHERE 
			USER_SEQ_NO = #{token.user_seq_no}
	</update>
	

	<!-- 이체(출금, 입금, 송금) 결과 저장 - insert -->
	<insert id="insertTransactionResult">
		INSERT 
		INTO TRANSACTIONINFO
		VALUES (
		  #{withdrawResult.user_seq_no}
		     <if test="trnsactionType.equals('WI')">
			, #{withdrawResult.fintech_use_num}
			, #{trnsactionType} 
			, #{withdrawResult.api_tran_id}
			, LEFT(#{withdrawResult.api_tran_dtm}, 14)
			, #{withdrawResult.bank_tran_id}
			<!-- bank_tran_date 는 문자열로 연원일까지만 포함되므로 별도의 캐스팅없이 날짜로 변환됨 -->
			, #{withdrawResult.bank_tran_date} 
			, #{withdrawResult.tran_amt}
			, #{withdrawResult.rsp_code}
			, #{withdrawResult.rsp_message}
			, #{withdrawResult.bank_rsp_code}
			, #{withdrawResult.bank_rsp_message}
			, #{withdrawResult.dps_bank_code_std}
			, #{withdrawResult.dps_account_num_masked}
			, ''
			  </if>
			  <if test="trnsactionType.equals('DE')">
			, #{withdrawResult.res_list[0].fintech_use_num}
			, #{trnsactionType}  
			, #{withdrawResult.api_tran_id}
			, LEFT(#{withdrawResult.api_tran_dtm}, 14)
			, #{withdrawResult.res_list[0].bank_tran_id}
			, #{withdrawResult.res_list[0].bank_tran_date} 
			, #{withdrawResult.res_list[0].tran_amt}
			, #{withdrawResult.rsp_code}
			, #{withdrawResult.rsp_message}
			, #{withdrawResult.res_list[0].bank_rsp_code}
			, #{withdrawResult.res_list[0].bank_rsp_message}
			, #{withdrawResult.wd_bank_code_std}
			, #{withdrawResult.wd_account_num_masked} 
			, ''
			  </if>
			  <if test="trnsactionType.equals('TR')">
			, #{withdrawResult.withdrawResult.fintech_use_num}
			, #{trnsactionType}  
			, #{withdrawResult.withdrawResult.api_tran_id}
			, LEFT(#{withdrawResult.withdrawResult.api_tran_dtm}, 14)
			, #{withdrawResult.withdrawResult.bank_tran_id}
			, #{withdrawResult.withdrawResult.bank_tran_date} 
			, #{withdrawResult.withdrawResult.tran_amt}
			, #{withdrawResult.withdrawResult.rsp_code}
			, #{withdrawResult.withdrawResult.rsp_message}
			, #{withdrawResult.withdrawResult.bank_rsp_code}
			, #{withdrawResult.withdrawResult.bank_rsp_message}
			, #{withdrawResult.withdrawResult.dps_bank_code_std}
			, #{withdrawResult.withdrawResult.dps_account_num_masked}
			
			, #{withdrawResult.depositResult.res_list[0].fintech_use_num}  
			  </if>
		)
	</insert>
	
	<!--  이체(출금, 입금) 결과 조회 - select -->
	<!--  bank_tran_id 가 일치하는 레코드 조회 -->
	<select id="selectTransactionResult">
		SELECT * 
		FROM TRANSACTIONINFO
		WHERE  BANK_TRAN_ID = #{bank_tran_id}
	</select>
	
	<!--  이체(출금, 입금) 결과 조회 - select -->
	<!--  user_seq_no 가 일치하는 레코드 조회 (조회 내역 처리 용도) -->
	<select id="selectTransactionDetail" >
		SELECT * 
		FROM TRANSACTIONINFO
		<if test="type.equals('fintech')">
		WHERE  USER_SEQ_NO = #{fintech_use_num}
		</if>
		<if test="type.equals('reciever_fintech')">
		WHERE  RECEIVER_FINTECH_USE_NUM = #{fintech_use_num}
		</if>
	</select>
	
	
	<!-- pay_list에서 토큰이 있는 id인지 조회 - select -->
	<select id="selectMemIdFromToken" resultType="string">
		SELECT * 
		FROM TOKENINFO 
		WHERE MEM_ID = #{id};
	</select>
	
	<!-- 사용자 계좌 정보 조회 - select -->
	<!--  user_seq_no가 일치하는 레코드 조회 -->
	<select id="selectPayAccountInfo">
		SELECT *
		FROM ACCOUNTINFO
		WHERE USER_SEQ_NO = #{user_seq_no}
	</select>

	<!-- 충전금액조회(송금하는자) -->
	<select id="selectPayAmount"  resultType="int">
	  SELECT 
			   SUM(CASE 
			            WHEN TRANSACTION_TYPE = 'WI' THEN tran_amt 
			            WHEN TRANSACTION_TYPE = 'TR' THEN -tran_amt 
			            WHEN TRANSACTION_TYPE = 'DE' THEN -tran_amt 
			            ELSE 0 
			        END) AS total_amount
		FROM TRANSACTIONINFO
	   WHERE USER_SEQ_NO = #{user_seq_no};
	</select>
	
	
	
	<!-- 충전금액조회(받는자) -->
	<select id="selectReceiverPayAmount"  resultType="int">
		SELECT SUM(TRAN_AMT)
		  FROM TRANSACTIONINFO
		 WHERE TRANSACTION_TYPE = 'TR'
		   AND RECEIVER_FINTECH_USE_NUM = #{fintech_use_num};
	</select>
	
	
	
	
	
	
	
	
	
	
	<!-- 거래내역 저장 -->
	<insert id="insertPayInfo">
		<selectKey keyProperty="pay_id" resultType="int" order="BEFORE">
		SELECT IFNULL(MAX(PAY_ID),0) + 1 AS pay_id
		  FROM PAYINFO
		</selectKey>
		INSERT
		  INTO PAYINFO 
		VALUES ( 
		       #{pay_id} 
		  	 , #{buyer_id}
		  	 , #{receiver_id}
		  	 , #{product_id}
		  	 , #{product_price}
		  	 , #{tran_amt}
		  	 , now()
		  	 , #{product_trade_adr1}
		  	 , 1 
		  )	
	</insert>
</mapper>